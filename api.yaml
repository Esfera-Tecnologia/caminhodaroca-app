openapi: 3.0.0
info:
  title: API do Projeto
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    OpeningHoursDay:
      type: object
      properties:
        open:
          type: string
          format: time
          example: "08:00"
          description: Horário de abertura no formato HH:mm
        close:
          type: string
          format: time
          example: "18:00"
          description: Horário de fechamento no formato HH:mm
        lunchBreak:
          type: boolean
          example: true
          description: Indica se a propriedade fecha para almoço neste dia
    OpeningHours:
      type: object
      properties:
        monday:
          $ref: '#/components/schemas/OpeningHoursDay'
        tuesday:
          $ref: '#/components/schemas/OpeningHoursDay'
        wednesday:
          $ref: '#/components/schemas/OpeningHoursDay'
        thursday:
          $ref: '#/components/schemas/OpeningHoursDay'
        friday:
          $ref: '#/components/schemas/OpeningHoursDay'
        saturday:
          $ref: '#/components/schemas/OpeningHoursDay'
        sunday:
          $ref: '#/components/schemas/OpeningHoursDay'
        custom:
          type: string
          description: "Horário de funcionamento com agendamento ou personalizado"
      description: Horários de funcionamento da propriedade para todos os dias da semana
paths:
  /api/login:
    post:
      summary: Realiza login do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
            example:
              email: "user@email.com"
              password: "123456"
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  avatar:
                    type: string
                    format: uri
                  email:
                    type: string
                    format: email
                  state:
                    type: string
                  ageRange:
                    type: string
                  travelWith:
                    type: string
                  category:
                    type: number
                  subcategories:
                    type: array
                    items:
                      type: number
                  token:
                    type: string
              example:
                id: 1
                name: "Alice"
                avatar: "https://picsum.photos/200/300"
                email: "alice@email.com"
                state: "SP"
                ageRange: "FROM_18_TO_29"
                travelWith: "FRIENDS"
                category: 3
                subcategories: [5, 6]
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
        '422':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
              example:
                message: "Os dados informados são inválidos."
                errors:
                  email: ["Usuário não encontrado. Verifique suas credenciais de login e senha."]
  /api/password/forgot:
    post:
      summary: Recuperação de senha
      description: Envia um e-mail com instruções de recuperação de senha para o usuário, caso o e-mail esteja cadastrado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
            example:
              email: "user@email.com"
      responses:
        '200':
          description: E-mail de recuperação enviado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "E-mail de recuperação enviado com sucesso."
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Usuário não encontrado."
  /api/states:
    get:
      summary: Lista de estados
      responses:
        '200':
          description: Lista de estados brasileiros
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: string
                    label:
                      type: string
              example:
                - value: "AC"
                  label: "Acre"
                - value: "AL"
                  label: "Alagoas"
                - value: "AM"
                  label: "Amazonas"
  /api/cities:
    get:
      summary: Lista de cidades brasileiras
      parameters:
        - in: query
          name: uf
          schema:
            type: string
          description: Filtra cidades pelo UF do estado (opcional)
      responses:
        '200':
          description: Lista de cidades
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: integer
                      description: ID da cidade
                    label:
                      type: string
                      description: Nome da cidade
              example:
                - value: 1
                  label: "Rio Branco"
                - value: 2
                  label: "Cruzeiro do Sul"
                - value: 3
                  label: "Maceió"
                - value: 4
                  label: "Arapiraca"
                - value: 5
                  label: "Manaus"
                - value: 6
                  label: "Parintins"
  /api/categories:
    get:
      summary: Lista de categorias
      responses:
        '200':
          description: Lista de categorias disponíveis
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: integer
                    label:
                      type: string
              example:
                - value: 1
                  label: "Tecnologia"
                - value: 2
                  label: "Saúde"
                - value: 3
                  label: "Finanças"
                - value: 4
                  label: "Educação"
  /api/subcategories:
    get:
      summary: Lista de subcategorias de uma ou mais categorias
      parameters:
        - in: query
          name: categoryIds
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: true
          description: Filtra subcategorias pelos IDs das categorias
      responses:
        '200':
          description: Lista de subcategorias filtradas pelas categorias informadas
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: integer
                      description: ID da subcategoria
                    label:
                      type: string
                      description: Nome da subcategoria
              example:
                - value: 1
                  label: "Smartphones"
                - value: 2
                  label: "Computadores"
                - value: 3
                  label: "Tablets"
                - value: 4
                  label: "Acessórios"
  /api/register/personal-data:
    post:
      summary: Cadastro - Etapa 1 (Dados básicos)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                state:
                  type: string
                ageRange:
                  type: string
                travelWith:
                  type: string
              required:
                - name
                - email
                - password
                - state
                - ageRange
      responses:
        '200':
          description: Etapa 1 concluída
          content:
            application/json:
              example:
                message: "Etapa 1 concluída com sucesso."
        '422':
          description: Erro de validação
          content:
            application/json:
              example:
                message: "Os dados informados são inválidos"
                errors:
                  email: ["O e-mail informado já está em uso"]
                  password: ["A senha deve ter no mínimo 8 caracteres."]
  /api/register/categories:
    post:
      summary: Cadastro - Etapa 2 (Categoria/Subcategorias)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: number
                  description: "ID da categoria selecionada"
                subcategories:
                  type: array
                  items:
                    type: number
                    description: "IDs das subcategorias selecionadas"
              required:
                - category
      responses:
        '200':
          description: Etapa 2 concluída
          content:
            application/json:
              example:
                message: "Etapa 2 concluída com sucesso."
        '422':
          description: Erro de validação
          content:
            application/json:
              example:
                message: "Os dados informados são inválidos"
                errors:
                  category: ["O campo categoria é obrigatório."]
                  subcategories: ["O campo subcategorias é obrigatório."]
  /api/register/finish:
    post:
      summary: Cadastro final - Recebe todos os dados e cria o usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # Etapa 1
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                state:
                  type: string
                ageRange:
                  type: string
                travelWith:
                  type: string
                # Etapa 2
                category:
                  type: number
                  description: "ID da categoria selecionada"
                subcategories:
                  type: array
                  items:
                    type: number
                    description: "IDs das subcategorias selecionadas"
                # Etapa 3
                terms:
                  type: boolean
                  description: "Aceite dos termos de uso"
              required:
                - name
                - email
                - password
                - state
                - ageRange
                - category
                - terms
      responses:
        '201':
          description: Usuário cadastrado com sucesso
          content:
            application/json:
              example:
                id: 1
                name: "Alice"
                avatar: "https://picsum.photos/200/300"
                email: "alice@email.com"
                state: "SP"
                ageRange: "FROM_18_TO_29"
                travelWith: "FRIENDS"
                category: 3
                subcategories: [5, 6]
                token: '9f4e3c2a1b6d8e0f3c4d5a6b7e8f9a0b'
        '422':
          description: Erro de validação
          content:
            application/json:
              example:
                message: "Os dados informados são inválidos"
                errors:
                  name: ["O campo nome é obrigatório."]
                  email: ["O e-mail informado já está em uso"]
                  password: ["A senha deve ter no mínimo 8 caracteres."]
                  category: ["O campo categoria é obrigatório."]
                  subcategories: ["Selecione ao menos uma subcategoria."]
                  termsAccepted: ["Você deve aceitar os termos para continuar."]
  /api/properties:
    get:
      summary: Lista de propriedades rurais
      description: Retorna uma lista de propriedades rurais com possibilidade de aplicar filtros.
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: Palavra-chave para busca
        - in: query
          name: categories[]
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: true
          description: IDs das categorias
        - in: query
          name: subcategories[]
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: true
          description: IDs das subcategorias
        - in: query
          name: propertyLocationId
          schema:
            type: integer
          description: ID da cidade da propriedade
        - in: query
          name: useCurrentLocation
          schema:
            type: boolean
          description: Se deve usar a localização atual do usuário
      responses:
        '200':
          description: Lista de propriedades rurais
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    logo:
                      type: string
                    type:
                      type: string
                      example: "Cabana"
                    rating:
                      type: number
                      format: float
                      minimum: 0
                      maximum: 5
                    location:
                      type: object
                      properties:
                        city:
                          type: string
                          example: "Gramado"
                        coordinates:
                          type: object
                          properties:
                            lat:
                              type: number
                              example: -29.3796
                            lng:
                              type: number
                              example: -50.8741
              example:
                - id: 1
                  name: "Cabana do Lago"
                  logo: "https://picsum.photos/200/300"
                  type: "Cabana"
                  rating: 4.8
                  location:
                    city: "Gramado"
                    coordinates:
                      lat: -29.3796
                      lng: -50.8741
                - id: 2
                  name: "Casa da Serra"
                  logo: "https://picsum.photos/200/300"
                  type: "Casa"
                  rating: 3.5
                  location:
                    city: "Canela"
                    coordinates:
                      lat: -29.3562
                      lng: -50.8111
  /api/properties/{id}:
    get:
      summary: Obter detalhes completos de uma propriedade rural
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID da propriedade
      responses:
        '200':
          description: Detalhes da propriedade
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  logo:
                    type: string
                    format: uri
                  phone:
                    type: string
                  rating:
                    type: number
                    minimum: 0
                    maximum: 5
                  type:
                    type: string
                    description: Tipo da propriedade
                  location:
                    type: object
                    properties:
                      city:
                        type: string
                      state:
                        type: string
                      coordinates:
                        type: object
                        properties:
                          lat:
                            type: number
                          lng:
                            type: number
                  description:
                    type: string
                  category:
                    type: string
                  subcategory:
                    type: string
                  openingHours:
                    $ref: '#/components/schemas/OpeningHours'
                  products:
                    type: string
                  accessibility:
                    type: string
                  petPolicy:
                    type: string
                  gallery:
                    type: array
                    items:
                      type: string
                      format: uri
              examples:
                example1:
                  value:
                    id: 1
                    name: "Fazenda Boa Vista"
                    logo: "https://picsum.photos/200/300"
                    rating: 4.2
                    type: "Hospedagem Rural"
                    phone: "21999999999"
                    location:
                      city: "Pedra de Guaratiba"
                      state: "Rio de Janeiro"
                      coordinates:
                        lat: -23.033
                        lng: -43.690
                    description: "A Fazenda Boa Vista oferece uma experiência autêntica no campo..."
                    category: "Hospedagem Rural"
                    subcategory: "Cabana"
                    openingHours:
                      monday:    { open: "08:00", close: "18:00", lunchBreak: true }
                      tuesday:   { open: "08:00", close: "18:00", lunchBreak: true }
                      wednesday: { open: "08:00", close: "18:00", lunchBreak: false }
                      thursday:  { open: "08:00", close: "18:00", lunchBreak: true }
                      friday:    { open: "08:00", close: "18:00", lunchBreak: true }
                      saturday:  { open: "09:00", close: "14:00", lunchBreak: false }
                      sunday:    { open: null, close: null, lunchBreak: false }
                      custom: "Abertura apenas sob agendamento com a equipe"
                    products: "Queijos artesanais, doces caseiros, ovos caipiras, hortaliças orgânicas"
                    accessibility: "Acesso para cadeirantes, estacionamento disponível"
                    petPolicy: "Nosso estabelecimento permite a entrada de animais de estimação"
                    gallery:
                      - "https://picsum.photos/200/300"
                      - "https://picsum.photos/200/300"
                      - "https://picsum.photos/200/300"
        '404':
          description: Propriedade não encontrada
          content:
            application/json:
              example:
                message: "Propriedade não encontrada"
  /api/properties/{id}/favorite:
    post:
      summary: Alterna o favorito da propriedade
      description: Se a propriedade não estiver favoritada, adiciona aos favoritos. Se já estiver, remove dos favoritos.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID da propriedade
      responses:
        '200':
          description: Favorito alternado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorited:
                    type: boolean
                    description: Indica se a propriedade agora está favoritada (true) ou removida (false)
                  message:
                    type: string
              examples:
                added:
                  value:
                    favorited: true
                    message: "Propriedade adicionada aos favoritos"
                removed:
                  value:
                    favorited: false
                    message: "Propriedade removida dos favoritos"
        '401':
          description: Usuário não autenticado
          content:
            application/json:
              example:
                message: "Usuário não autenticado"
        '404':
          description: Propriedade não encontrada
          content:
            application/json:
              example:
                message: "Propriedade não encontrada"
  /api/properties/{id}/rating:
    post:
      summary: Atribui uma avaliação de 1 a 5 estrelas a uma propriedade
      description: Permite que o usuário atribua ou atualize a avaliação de uma propriedade. O valor deve estar entre 1 e 5. O retorno traz a nova avaliação geral da propriedade e a avaliação atribuída pelo usuário.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID da propriedade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Avaliação da propriedade (1 a 5 estrelas)
            example:
              rating: 4
      responses:
        '200':
          description: Avaliação registrada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_rating:
                    type: integer
                    description: Avaliação atribuída pelo usuário autenticado
                  average_rating:
                    type: number
                    format: float
                    description: Nova avaliação média da propriedade após a atualização
                  message:
                    type: string
              example:
                user_rating: 4
                average_rating: 4.2
                message: "Avaliação registrada com sucesso"
        '400':
          description: Avaliação inválida (fora do intervalo 1-5)
          content:
            application/json:
              example:
                message: "A avaliação deve ser um número entre 1 e 5"
        '401':
          description: Usuário não autenticado
          content:
            application/json:
              example:
                message: "Usuário não autenticado"
        '404':
          description: Propriedade não encontrada
          content:
            application/json:
              example:
                message: "Propriedade não encontrada"
  /api/profile/personal-data:
    post:
      summary: Atualização de dados básicos do usuário logado
      description: Atualiza os dados pessoais do usuário autenticado.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                state:
                  type: string
                ageRange:
                  type: string
                travelWith:
                  type: string
              required:
                - name
                - email
                - password
                - state
                - ageRange
      responses:
        '200':
          description: Dados básicos atualizados
          content:
            application/json:
              example:
                message: "As informações pessoais foram atualizadas com sucesso!"
        '401':
          description: Usuário não autenticado
          content:
            application/json:
              example:
                message: "Usuário não autenticado"
        '422':
          description: Erro de validação
          content:
            application/json:
              example:
                message: "Os dados informados são inválidos"
                errors:
                  email: ["O e-mail informado já está em uso"]
                  password: ["A senha deve ter no mínimo 8 caracteres."]
  /api/profile/categories:
    post:
      summary: Atualização de categorias/subcategorias do usuário logado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: number
                  description: "ID da categoria selecionada"
                subcategories:
                  type: array
                  items:
                    type: number
                    description: "IDs das subcategorias selecionadas"
              required:
                - category
      responses:
        '200':
          description: Categorias/subcategorias atualizadas
          content:
            application/json:
              example:
                message: "As preferências foram atualizadas com sucesso!"
        '401':
          description: Usuário não autenticado
          content:
            application/json:
              example:
                message: "Usuário não autenticado"
        '422':
          description: Erro de validação
          content:
            application/json:
              example:
                message: "Os dados informados são inválidos"
                errors:
                  category: ["O campo categoria é obrigatório."]
                  subcategories: ["O campo subcategorias é obrigatório."]
  /api/profile/photo:
    post:
      summary: Atualiza a foto de perfil do usuário logado
      description: Faz upload de uma nova foto de perfil para o usuário autenticado.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: Arquivo da foto de perfil
      responses:
        '200':
          description: Foto de perfil atualizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  filePath:
                    type: string
        '401':
          description: Usuário não autenticado
          content:
            application/json:
              example:
                message: "Usuário não autenticado"
        '422':
          description: Erro de validação
          content:
            application/json:
              example:
                message: "Os dados informados são inválidos"
                errors:
                  photo: ["A foto deve ter no máximo 2 mb."]